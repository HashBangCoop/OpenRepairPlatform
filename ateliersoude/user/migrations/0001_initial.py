# Generated by Django 2.2 on 2019-04-16 13:48

import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [("auth", "0011_update_proxy_permissions")]

    operations = [
        migrations.CreateModel(
            name="CustomUser",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "password",
                    models.CharField(max_length=128, verbose_name="password"),
                ),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        max_length=254,
                        unique=True,
                        verbose_name="email address",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=30, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=30, verbose_name="last name"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        verbose_name="date joined",
                    ),
                ),
                (
                    "street_address",
                    models.CharField(
                        blank=True,
                        default="",
                        max_length=255,
                        verbose_name="street address",
                    ),
                ),
                (
                    "phone_number",
                    models.CharField(
                        blank=True,
                        max_length=15,
                        null=True,
                        verbose_name="phone number",
                    ),
                ),
                (
                    "birth_date",
                    models.DateField(
                        blank=True, null=True, verbose_name="date of birth"
                    ),
                ),
                (
                    "gender",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("m", "Male"),
                            ("f", "Female"),
                            ("o", "Other"),
                        ],
                        default="o",
                        max_length=1,
                    ),
                ),
                (
                    "avatar_img",
                    models.ImageField(
                        blank=True,
                        null=True,
                        upload_to="media/avatar/",
                        verbose_name="Avatar",
                    ),
                ),
                (
                    "bio",
                    models.TextField(
                        blank=True, null=True, verbose_name="bio"
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.Group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.Permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={"verbose_name": "user", "verbose_name_plural": "user"},
        ),
        migrations.CreateModel(
            name="Abilities",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(max_length=100, verbose_name="Abilities"),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Organization",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        max_length=100, verbose_name="Organization name"
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        default="", verbose_name="Activity description"
                    ),
                ),
                (
                    "picture",
                    models.ImageField(
                        null=True,
                        upload_to="organizations/",
                        verbose_name="Image",
                    ),
                ),
                ("active", models.BooleanField(verbose_name="Active")),
                ("slug", models.SlugField(default="", unique=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "owner",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="OrganizationPerson",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "role",
                    models.SmallIntegerField(
                        choices=[
                            (0, "Visitor"),
                            (10, "Member"),
                            (20, "Volunteer"),
                            (30, "Admin"),
                        ],
                        default=0,
                    ),
                ),
                (
                    "organization",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="user.Organization",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={"unique_together": {("organization", "user", "role")}},
        ),
        migrations.CreateModel(
            name="OrganizationAdministrator",
            fields=[],
            options={"proxy": True, "indexes": [], "constraints": []},
            bases=("user.organizationperson",),
        ),
        migrations.CreateModel(
            name="OrganizationMember",
            fields=[],
            options={"proxy": True, "indexes": [], "constraints": []},
            bases=("user.organizationperson",),
        ),
        migrations.CreateModel(
            name="OrganizationVisitor",
            fields=[],
            options={"proxy": True, "indexes": [], "constraints": []},
            bases=("user.organizationperson",),
        ),
        migrations.CreateModel(
            name="OrganizationVolunteer",
            fields=[
                (
                    "organizationperson_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="user.OrganizationPerson",
                    ),
                ),
                ("tagline", models.TextField(verbose_name="Tagline")),
                ("abilities", models.ManyToManyField(to="user.Abilities")),
            ],
            bases=("user.organizationperson",),
        ),
    ]
